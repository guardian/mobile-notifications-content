AWSTemplateFormatVersion: '2010-09-09'
Description: lambda to replace the content-notifications-service
Parameters:
  Stack:
    Description: Stack name
    Type: String
    Default: content-api-mobile-notifications
  App:
    Description: Application name
    Type: String
    Default: mobile-notifications-content
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - CODE
      - PROD
    Default: CODE
  DeployBucket:
    Description: S3 Bucket where RiffRaff uploads artifacts on deploy
    Type: String
    Default: content-api-dist
  MobileAccountId:
    Description: Account ID of the gu moble account which
    Type: String
    Default: 201359054765
  CrossAccountBaseRoleName:
    Description: Base constituent name of the mobile account roles to assume
    Type: String
    Default: mobile-content-notifications-lambda-cross-account
  ConfigurationBucket:
    Description: S3 Bucket containing app configuration
    Type: String
    Default: mobile-notifications-dist
  KinesisStreamName:
        Description: Capi kinesis stream
        Type: String
        Default: content-api-firehose-v2
Resources:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub mobile-notifications-content-lambdas-role-${Stage}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
      Policies:
        - PolicyName: assume-mobile-ssm-read-config-role
          PolicyDocument:
            Statement:
              Effect: Allow
              Action: sts:AssumeRole
              Resource: !Sub arn:aws:iam::${MobileAccountId}:role/${CrossAccountBaseRoleName}-ssm-${Stage}
        - PolicyName: assume-mobile-dynamo-role
          PolicyDocument:
            Statement:
              Effect: Allow
              Action: sts:AssumeRole
              Resource: !Sub arn:aws:iam::${MobileAccountId}:role/${CrossAccountBaseRoleName}-dynamo-${Stage}
        - PolicyName: assume-mobile-sqs-role
          PolicyDocument:
            Statement:
              Effect: Allow
              Action: sts:AssumeRole
              Resource: !Sub arn:aws:iam::${MobileAccountId}:role/${CrossAccountBaseRoleName}2-sqs-${Stage}
        - PolicyName: logs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
        - PolicyName: invoke-lambda
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: "*"
        - PolicyName: iam-read-and-assume
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - iam:PassRole
                - iam:GenerateCredentialReport
                - iam:Get*
                - iam:List*
              Resource: "*"
        - PolicyName: kinesis-read
          PolicyDocument:
             Statement:
               Effect: Allow
               Action:
                 - Kinesis:DescribeStream
                 - Kinesis:GetRecords
                 - Kinesis:GetShardIterator
                 - Kinesis:ListStream
               Resource: "*"
        - PolicyName: cloudwatch-put-metric-daata
          PolicyDocument:
             Statement:
               Effect: Allow
               Action:
                  - cloudwatch:PutMetricData
               Resource: "*"

  ContentLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      Environment:
        Variables:
          CrossAccountSsmReadingRole: !Sub arn:aws:iam::${MobileAccountId}:role/${CrossAccountBaseRoleName}-ssm-${Stage}
          App: !Sub ${App}
          Stack: !Sub ${Stack}
          Stage: !Sub ${Stage}
      Description: Lambda to send notification when new content is published
      Handler: com.gu.mobile.content.notifications.ContentLambda::handler
      MemorySize: 4096
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java11
      Timeout: 60

  ContentEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !Ref ContentLambda
      Enabled: true
      EventSourceArn: !Sub arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisStreamName}-${Stage}
      StartingPosition: LATEST
      BisectBatchOnFunctionError: true

  LiveBlogLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-liveblogs-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      Environment:
        Variables:
          CrossAccountSsmReadingRole: !Sub arn:aws:iam::${MobileAccountId}:role/${CrossAccountBaseRoleName}-ssm-${Stage}
          App: !Sub ${App}
          Stack: !Sub ${Stack}
          Stage: !Sub ${Stage}
      Description: Lambda that sends push notifications when new key events are published on a liveblog
      Handler: com.gu.mobile.content.notifications.LiveBlogLambda::handler
      MemorySize: 4096
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java11
      Timeout: 60

  LiveBlogEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !Ref LiveBlogLambda
      Enabled: true
      EventSourceArn: !Sub arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisStreamName}-${Stage}
      StartingPosition: LATEST
      BisectBatchOnFunctionError: true
